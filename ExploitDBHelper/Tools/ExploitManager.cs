using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Data;
using System.Data.OleDb;
using System.ComponentModel;
using System.Windows;

namespace ExploitDBHelper.Tools
{

    internal class ExploitManager
    {
        internal const string CSVUrl = "https://raw.githubusercontent.com/offensive-security/exploit-database/master/files.csv";
        internal const string CSVFileName = "exploit.csv";
        public static DateTime LastChange = DateTime.MinValue;
        public static DataTable ExploitTable = null;
        public static event EventHandler CSVChange;
        public static List<string> Platforms = new List<string>(), Types = new List<string>();
        public static void Init()
        {
            if (File.Exists(CSVFileName))
            {
                ExploitTable = CSVToTable(CSVFileName);
                LastChange = File.GetLastWriteTime(CSVFileName);
                DataRow[] dr = ExploitTable.Select();
                foreach (var dri in dr)
                {
                    string pl = dri["platform"].ToString();
                    string ty = dri["type"].ToString();
                    if (!Platforms.Contains(pl)) Platforms.Add(pl);
                    if (!Types.Contains(ty)) Types.Add(ty);
                }
                Platforms.Sort();
                Types.Sort();
            }
        }
        public static void FlushCache()
        {
            File.Delete(CSVFileName);
            WebClient wc = new WebClient();
            wc.DownloadFileCompleted += Wc_DownloadFileCompleted;
            wc.DownloadFileAsync(new Uri(CSVUrl), CSVFileName);
        }

        private static void Wc_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {
            ExploitTable = CSVToTable(CSVFileName);
            LastChange = File.GetLastWriteTime(CSVFileName);
            CSVChange(ExploitTable, null);
        }

        private static DataTable CSVToTable(string fullPath)
        {
            string fileName = Path.GetFileName(fullPath);
            string connStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="
               + Environment.CurrentDirectory + ";Extended Properties='Text;HDR=YES;FMT=Delimited;IMEX=1;'";
            string cmdStr = "select * from [" + fileName + "]";
            var conn = new OleDbConnection(connStr);
            var retData = new DataTable();
            try
            {
                conn.Open();
                var adapter = new OleDbDataAdapter(cmdStr, conn);
                adapter.Fill(retData);
            }
            catch (Exception ex) { Console.Write(ex); }
            finally
            {
                if (conn.State == ConnectionState.Open)
                    conn.Close();
            }
            return retData;
        }

    }
}
