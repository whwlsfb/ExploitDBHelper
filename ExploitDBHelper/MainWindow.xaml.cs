using ExploitDBHelper.Tools;
using System;
using System.IO;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using System.Data;
using System.Diagnostics;

namespace ExploitDBHelper
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        ObservableCollection<Exploit> Exploits = new ObservableCollection<Exploit>();

        public MainWindow()
        {
            InitializeComponent();
            ExploitManager.CSVChange += ExploitManager_CSVChange;
            ExploitManager.DownloadProgressChanged += ExploitManager_DownloadProgressChanged;
            result_view.DataContext = Exploits;
            InitUi();
            search_text.Focus();
        }

        private void ExploitManager_DownloadProgressChanged(object sender, System.Net.DownloadProgressChangedEventArgs e)
        {
            f_prog.Value = e.ProgressPercentage;
            status_txt.Text = string.Format("Downloading: {0}%", e.ProgressPercentage);
            f_prog.Visibility = e.ProgressPercentage != 100 ? Visibility.Visible : Visibility.Hidden;
        }

        private void ExploitManager_CSVChange(object sender, EventArgs e)
        {
            InitUi();
        }

        public void InitUi()
        {
            platform_box.Items.Clear();
            platform_box.Items.Add("All");
            foreach (var item in ExploitManager.Platforms)
                platform_box.Items.Add(item);
            platform_box.SelectedIndex = 0;

            type_box.Items.Clear();
            type_box.Items.Add("All");
            foreach (var item in ExploitManager.Types)
                type_box.Items.Add(item);
            type_box.SelectedIndex = 0;

            update_btn.Content = "Update";
            update_btn.IsEnabled = true;
            last_update_label.Content = string.Format("Last Update：{0}", ExploitManager.LastChange);
            status_txt.Text = "Loading completed.";
        }

        private void update_btn_Click(object sender, RoutedEventArgs e)
        {
            ExploitManager.FlushCache();
            update_btn.Content = "Updateing...";
            update_btn.IsEnabled = false;
        }

        private void search_btn_Click(object sender, RoutedEventArgs e)
        {
            search_btn.IsEnabled = false;
            result_view.Items.Clear();
            string sql_where = string.Format("description like '%{0}%'", search_text.Text);
            string platform_str = platform_box.SelectedItem.ToString();
            if (platform_str != "All") sql_where += string.Format(" and platform='{0}'", platform_str);
            string type_str = type_box.SelectedItem.ToString();
            if (type_str != "All") sql_where += string.Format(" and type='{0}'", type_str);
            DataRow[] result = ExploitManager.ExploitTable.Select(sql_where, "date desc");
            if (result.Length == 0) MessageBox.Show("Not found.");
            foreach (var item in result)
            {
                Exploit exp = new Exploit();
                exp.Name = item["description"].ToString();
                exp.Date = string.Format("{0:d}", item["date"]);
                exp.PlatformType = string.Format("{0},{1}", item["platform"], item["type"]);
                exp.Port = Convert.ToInt32(item["port"]);
                exp.ID = Convert.ToInt32(item["id"]);
                exp.Path = Convert.ToString(item["file"]);
                result_view.Items.Add(exp);
            }
            status_txt.Text = string.Format("Results: {0}", result.Length);
            search_btn.IsEnabled = true;
        }

        private void search_text_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return)
                search_btn_Click(null, null);
        }

        private void result_view_PreviewMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (result_view.SelectedItem == null) return;
            Exploit exp = result_view.SelectedItem as Exploit;
            Process.Start(string.Format("http://www.exploit-db.com/exploits/{0}", exp.ID));
        }

        private void script_make_Click(object sender, RoutedEventArgs e)
        {
            if (exploit_id_text.Text == string.Empty) return;
            if (exploit_id_text.Tag == null)
            {
                DataRow[] result = ExploitManager.ExploitTable.Select(string.Format("id = {0}", exploit_id_text.Text));
                if (result.Length > 0) exploit_id_text.Tag = result[0]["file"];
                else
                {
                    script_box.Text = "It does not support the production of this exploit.";
                    return;
                }
            }
            var path = exploit_id_text.Tag.ToString();
            var expid = Convert.ToInt32(exploit_id_text.Text);
            var ext = Path.GetExtension(path).ToLower();
            switch (ext)
            {
                case ".sh":
                    script_box.Text = ScriptMake.SH(expid);
                    break;
                case ".py":
                    script_box.Text = ScriptMake.Python(expid);
                    break;
                case ".pl":
                    script_box.Text = ScriptMake.Perl(expid);
                    break;
                case ".c":
                    script_box.Text = ScriptMake.CLang(expid);
                    break;
                default:
                    script_box.Text = "It does not support the production of this exploit.";
                    break;
            }
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            if (result_view.SelectedItem == null) return;
            Exploit exp = result_view.SelectedItem as Exploit;
            exploit_id_text.Text = exp.ID.ToString();
            exploit_id_text.Tag = exp.Path;
            tabControl.SelectedItem = tabControl.Items[1];
            script_make_Click(null, null);
        }
    }
    public class Exploit : INotifyPropertyChanged
    {
        private string _name = string.Empty;
        public string Name
        {
            get { return _name; }
            set { _name = value; NotifyPropertyChange("Name"); }
        }
        private string _platformType = string.Empty;
        public string PlatformType
        {
            get { return _platformType; }
            set { _platformType = value; NotifyPropertyChange("PlatformType"); }
        }
        private string _date = string.Empty;
        public string Date
        {
            get { return _date; }
            set { _date = value; NotifyPropertyChange("Date"); }
        }
        private int _id = 0;
        public int ID
        {
            get { return _id; }
            set { _id = value; NotifyPropertyChange("ID"); }
        }
        private int _port = 0;
        public int Port
        {
            get { return _port; }
            set { _port = value; NotifyPropertyChange("Port"); }
        }
        public string Path = string.Empty;
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChange(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
